
from scripts.make_params import make
from pathlib import Path
import yaml
import numpy as np

methods = ["nuance", "wotan_tls"]

# DATASET CREATION
# ----------------
# first dataset (small grid)
dataset = Path("data/dataset1/params")
dataset.mkdir(exist_ok=True, parents=True)
amps = np.linspace(0.1, 5, 2)
vars = np.linspace(0.1, 5, 2)
for i, amp in enumerate(amps):
    for j, var in enumerate(vars):
        _i = i*len(amps) + j
        params = make(amp=amp, var=var, seed=_i)
        # yaml.dump(params, open(dataset / f"{_i}.yaml", "w"))

# second dataset (random values from 0 to n)
dataset = Path("data/dataset2/params")
dataset.mkdir(exist_ok=True, parents=True)
for i in range(100, 300):
    amp = np.random.uniform(0.1, 25)
    var = np.random.uniform(0.1, 10)
    params = make(amp=amp, var=var, seed=i)
    yaml.dump(params, open(dataset / f"{i}.yaml", "w"))

# third dataset (random values from 0 to a wider n)
dataset = Path("data/dataset3/params")
dataset.mkdir(exist_ok=True, parents=True)
for i in range(100, 300):
    amp = np.random.uniform(0.1, 100)
    var = np.random.uniform(0.1, 40)
    params = make(amp=amp, var=var, seed=i)
    yaml.dump(params, open(dataset / f"{i}.yaml", "w"))

# INPUT FUNCTIONS
# ---------------
def dataset_results(wildcards):
    seeds, = glob_wildcards(f"data/{wildcards.dataset}/params" + "/{seed, \d+}.yaml")
    return expand(f"data/{wildcards.dataset}/results/{wildcards.method}/{{seed}}.yaml", seed=seeds)

def dataset_params(wildcards):
    seeds, = glob_wildcards(f"data/{wildcards.dataset}/params" + "/{seed, \d+}.yaml")
    return expand(f"data/{wildcards.dataset}/params/{{seed}}.yaml", seed=seeds)

# DAG
# ---
wildcard_constraints:
    seed="\d+"

# rule:
#     input: 
#         #[f"figures/dataset1/{method}_result.png" for method in methods],
#         #[f"figures/dataset2/{method}_result.png" for method in methods],
#         #[f"figures/dataset3/{method}_result.png" for method in methods],
#         "figures/final_result.pdf"

rule make_lightcurves:
    input: "data/{dataset}/params/{seed, \d+}.yaml"
    output: "data/{dataset}/lightcurves/{seed}.npy"
    conda: "envs/base.yaml"
    priority: 0
    script: "scripts/make_lightcurve.py"

rule search:
    input: 
        "data/{dataset}/lightcurves/{seed, \d+}.npy",
        "data/{dataset}/params/{seed, \d+}.yaml"
    output: "data/{dataset}/results/{method}/{seed}.yaml"
    conda: "envs/base.yaml"
    priority: 1
    script: "scripts/search_{wildcards.method}.py"

rule plot_lc:
    input: 
        "data/{dataset}/lightcurves/{seed, \d+}.npy"
    output: "figures/{dataset}/lightcurves/{seed}.png"
    conda: "envs/base.yaml"
    script: "scripts/plot_lc.py"

rule detection_results:
    input: 
        params=dataset_params,
        result=dataset_results
    output: "data/{dataset}/results/{method}/detections.csv"
    conda: "envs/base.yaml"
    priority: 2
    script: "scripts/aggregate_detections.py"

rule plot_detection:
    input: "data/{dataset}/results/{method}/detections.csv"
    output: "figures/{dataset}/{method}_result.png"
    conda: "envs/base.yaml"
    priority: 3
    script: "scripts/plot_result.py"

rule plot_final:
    input: 
        "data/dataset3/results/nuance/detections.csv",
        "data/dataset3/results/wotan_tls/detections.csv",
        "data/dataset2/results/nuance/detections.csv",
        "data/dataset2/results/wotan_tls/detections.csv"
    output: "figures/final_result.pdf"
    conda: "envs/base.yaml"
    priority: 4
    script: "scripts/plot_final.py"
