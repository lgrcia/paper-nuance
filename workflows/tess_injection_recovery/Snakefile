configfile: "config.yaml"


# targets TICs
idxs = range(config["n"] ** 2)

import pandas as pd

all_targets = pd.read_csv("static/tess-ultra-fast-rotators-brighter-mag14-clean.csv").Name.values
methods = {
    "bls_bspline": "Bspline + BLS",
    "bls_wotan3D": "bi-weight + BLS",
    "gp": "GP + BLS",
    "bls_harmonics": "harmonics + BLS",
    "bens": "iterative + BLS",
    "nuance": "nuance",
}

rule all:
    input:
        [f"results/{method}.npy" for method in methods.keys()],
        "figures/tpfp_bars.pdf", 
        "figures/tpfp.pdf",
        "_figures/searched/1019692.pdf",
        "_figures/cleaned/1019692.pdf",
        "results/stats.yaml"

rule compute_true_false_positives:
    input: "data/{target}/info.yaml", "data/{target}/recovered/{method}/results.csv", "data/{target}/cleaned.fluxes"
    output: "data/{target}/recovered/{method}.npy",
    script: "scripts/true_false_positives.py"

rule concatenate_tf_positives:
    input: [f"data/{target}/recovered/{{method}}.npy" for target in all_targets]
    output: "results/{method}.npy"
    script: "scripts/concatenate_tf_positives.py"

rule plot_tp_fp:
    input: [f"results/{method}.npy" for method in methods.keys()]
    output: "figures/tpfp.pdf", "figures/tpfp_bars.pdf", "figures/tpfp_ims.pdf"
    params: methods=methods
    script: "scripts/plot_tpfp.py"

rule record_stats:
    input: [f"results/{method}.npy" for method in methods.keys()]
    output: "results/stats.yaml"
    script: "scripts/record_stats.py"

include: "search.smk"
include: "plots.smk"
