
configfile: "config.yaml"

methods = ["bspline", "harmonics", "iterative", "biweight", "gp"]
idxs = range(config["n"])

rule all:
    input: "figures/synthetic_ir.pdf", "data/results.csv"

rule params:
    output: "data/params/{i}.yaml"
    conda: "envs/base.yaml"
    priority: 0
    script: "scripts/params.py"

rule lightcurve:
    input: "data/params/{i}.yaml"
    output: "data/lightcurves/{i}.npy"
    conda: "envs/base.yaml"
    priority: 0
    script: "scripts/lightcurve.py"


rule detrend:
    input: 
        lc="data/lightcurves/{i}.npy",
        params="data/params/{i}.yaml"
    output: "data/detrended/{method}/{i}.npy"
    script: "scripts/{wildcards.method}.py"

rule bls:
    input: 
        lc="data/detrended/{method}/{i}.npy",
        params="data/params/{i}.yaml"
    output: "data/results_bls/{method}/{i}.pkl"
    script: "scripts/bls.py"

rule nuance:
    input: 
        lc="data/lightcurves/{i}.npy",
        params="data/params/{i}.yaml"
    output: "data/results_nuance/{i}.pkl"
    script: "scripts/nuance.py"

rule aggregate:
    input: 
        **{method: [f"data/results_bls/{method}/{i}.pkl" for i in idxs] for method in methods},
        nuance = [f"data/results_nuance/{i}.pkl" for i in idxs],
        params = [f"data/params/{i}.yaml" for i in idxs]
    output: "data/results.csv"
    params: methods=methods
    script: "scripts/aggregate.py"

rule plot:
    input: "data/results.csv"
    output: "figures/synthetic_ir.pdf"
    params: methods=methods
    priority: 3
    script: "scripts/plot.py"
