
from scripts.make_params import make
from pathlib import Path
import yaml
import numpy as np
from os import path

# DATASET CREATION
# ----------------
dataset = Path("data/params")
dataset.mkdir(exist_ok=True, parents=True)
n = 10000
np.random.seed(42)
vars = np.random.uniform(0.1, 10, size=n)
amps = np.random.uniform(0.1, 5, size=n)
for i, (var, amp) in enumerate(zip(vars, amps)):
    destination = dataset / f"{i}.yaml"
    params = make(delta_v=amp, tau_v=var, seed=i)
    if not path.exists(destination) or True:
        yaml.dump(params, open(destination, "w"))

# INPUT FUNCTIONS
# ---------------
def dataset_results(wildcards):
    seeds, = glob_wildcards(f"data/params" + "/{seed, \d+}.yaml")
    return expand(f"data/results/{{seed}}.yaml", seed=seeds)

def dataset_params(wildcards):
    seeds, = glob_wildcards(f"data/params" + "/{seed, \d+}.yaml")
    return expand(f"data/params/{{seed}}.yaml", seed=seeds)

seeds, = glob_wildcards(f"data/params" + "/{seed, \d+}.yaml")

# DAG
# ---
wildcard_constraints:
    seed="\d+"

rule:
    input: 
        "figures/result.pdf"

rule make_lightcurves:
    input: "data/params/{seed, \d+}.yaml"
    output: "data/lightcurves/{seed}.npy"
    priority: 0
    script: "scripts/make_lightcurve.py"

rule clean:
    input: 
        "data/params/{seed, \d+}.yaml",
        "data/lightcurves/{seed, \d+}.npy"
    output: "data/results/{seed}.yaml"
    priority: 1
    script: "scripts/clean.py"

rule detection_results:
    input: dataset_results
    output: protected("results/results.csv")
    priority: 2
    script: "scripts/aggregate_results.py"

rule plot:
    input: "results/results.csv"
    output: "figures/result.pdf"
    priority: 3
    script: "scripts/plot.py"
